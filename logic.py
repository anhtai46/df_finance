import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import google.generativeai as genai
import time

# --- C·∫•u h√¨nh trang v√† API ---
st.set_page_config(
    page_title="Ph√¢n t√≠ch R·ªßi ro T√≠n d·ª•ng",
    page_icon="üè¶",
    layout="wide"
)

# L·∫•y API key t·ª´ Streamlit secrets (cho deploy) ho·∫∑c input (cho local)
try:
    GOOGLE_API_KEY = st.secrets["GEMINI_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
except (FileNotFoundError, KeyError):
    st.sidebar.warning("Kh√¥ng t√¨m th·∫•y API Key trong secrets.", icon="üîë")
    GOOGLE_API_KEY = st.sidebar.text_input("Nh·∫≠p Gemini API Key c·ªßa b·∫°n:", type="password")
    if GOOGLE_API_KEY:
        genai.configure(api_key=GOOGLE_API_KEY)
    else:
        st.info("·ª®ng d·ª•ng c·∫ßn Gemini API Key ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng ph√¢n t√≠ch c·ªßa AI.")
        # Kh√¥ng d·ª´ng ·ª©ng d·ª•ng, v·∫´n cho ph√©p t√≠nh to√°n x√°c su·∫•t
        # st.stop()

# --- C√°c h√†m x·ª≠ l√Ω logic ---

def train_model(df):
    """
    H√†m hu·∫•n luy·ªán m√¥ h√¨nh Logistic Regression t·ª´ d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p.
    'y' l√† bi·∫øn m·ª•c ti√™u (1: v·ª° n·ª£, 0: kh√¥ng v·ª° n·ª£).
    """
    if 'y' not in df.columns:
        st.error("D·ªØ li·ªáu hu·∫•n luy·ªán ph·∫£i c√≥ c·ªôt 'y' l√† bi·∫øn m·ª•c ti√™u.")
        return None, None, None, None

    X = df.drop(columns=['y'])
    y = df['y']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LogisticRegression(max_iter=1000)
    model.fit(X_train, y_train)

    # ƒê√°nh gi√° m√¥ h√¨nh
    y_pred_test = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred_test)
    cm = confusion_matrix(y_test, y_pred_test)

    return model, accuracy, cm, X.columns.tolist()

def get_gemini_analysis(customer_data, pd_score):
    """
    H√†m g·ªçi API Gemini ƒë·ªÉ ph√¢n t√≠ch, gi·∫£i th√≠ch k·∫øt qu·∫£ v√† ƒë∆∞a ra khuy·∫øn ngh·ªã.
    """
    if not GOOGLE_API_KEY:
        return "Vui l√≤ng cung c·∫•p API Key ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y."

    model = genai.GenerativeModel('gemini-pro')

    # Chuy·ªÉn d·ªØ li·ªáu kh√°ch h√†ng th√†nh chu·ªói d·ªÖ ƒë·ªçc
    data_string = "\n".join([f"- {key}: {value}" for key, value in customer_data.items()])

    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia qu·∫£n tr·ªã r·ªßi ro t√≠n d·ª•ng cao c·∫•p t·∫°i m·ªôt t·ªï ch·ª©c t√†i ch√≠nh.
    D·ª±a tr√™n th√¥ng tin kh√°ch h√†ng v√† x√°c su·∫•t v·ª° n·ª£ (PD) ƒë∆∞·ª£c t√≠nh to√°n, h√£y ƒë∆∞a ra m·ªôt b·∫£n ph√¢n t√≠ch chuy√™n s√¢u.

    **Th√¥ng tin kh√°ch h√†ng:**
    {data_string}

    **K·∫øt qu·∫£ m√¥ h√¨nh:**
    - X√°c su·∫•t v·ª° n·ª£ (PD): {pd_score:.2%}

    **Y√™u c·∫ßu ph√¢n t√≠ch:**
    1.  **Gi·∫£i th√≠ch m·ª©c ƒë·ªô r·ªßi ro:** D·ª±a v√†o ch·ªâ s·ªë PD, h√£y gi·∫£i th√≠ch ng·∫Øn g·ªçn m·ª©c ƒë·ªô r·ªßi ro c·ªßa kh√°ch h√†ng n√†y (Th·∫•p, Trung b√¨nh, Cao, R·∫•t cao).
    2.  **Y·∫øu t·ªë ·∫£nh h∆∞·ªüng ch√≠nh:** T·ª´ d·ªØ li·ªáu kh√°ch h√†ng, ch·ªâ ra 2-3 y·∫øu t·ªë c√≥ kh·∫£ nƒÉng ·∫£nh h∆∞·ªüng l·ªõn nh·∫•t ƒë·∫øn k·∫øt qu·∫£ PD n√†y (v√≠ d·ª•: thu nh·∫≠p th·∫•p, l·ªãch s·ª≠ t√≠n d·ª•ng kh√¥ng t·ªët, v.v.).
    3.  **ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông:** D·ª±a tr√™n ph√¢n t√≠ch, ƒë∆∞a ra m·ªôt ƒë·ªÅ xu·∫•t r√µ r√†ng cho c√°n b·ªô t√≠n d·ª•ng (V√≠ d·ª•: Ph√™ duy·ªát kho·∫£n vay, Y√™u c·∫ßu th√™m t√†i s·∫£n th·∫ø ch·∫•p, T·ª´ ch·ªëi, Ph·ªèng v·∫•n s√¢u h∆°n,...).
    4.  **Ph∆∞∆°ng √°n thu h·ªìi n·ª£ (n·∫øu r·ªßi ro cao):** N·∫øu kh√°ch h√†ng c√≥ r·ªßi ro t·ª´ trung b√¨nh ƒë·∫øn cao, h√£y ƒë·ªÅ xu·∫•t 2-3 ph∆∞∆°ng √°n/chi·∫øn l∆∞·ª£c ph√≤ng ng·ª´a v√† thu h·ªìi n·ª£ ti·ªÅm nƒÉng.

    Tr√¨nh b√†y k·∫øt qu·∫£ m·ªôt c√°ch chuy√™n nghi·ªáp, c√≥ c·∫•u tr√∫c v√† d·ªÖ hi·ªÉu.
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"ƒê√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn AI: {e}"

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---

st.title("üè¶ Ph·∫ßn m·ªÅm Ph√¢n t√≠ch v√† D·ª± b√°o X√°c su·∫•t V·ª° n·ª£")

menu = ["Gi·ªõi thi·ªáu & Hu·∫•n luy·ªán M√¥ h√¨nh", "D·ª± b√°o V·ª° n·ª£ cho Kh√°ch h√†ng"]
choice = st.sidebar.selectbox('Ch·ªçn ch·ª©c nƒÉng', menu)

# --- Trang 1: Gi·ªõi thi·ªáu & Hu·∫•n luy·ªán M√¥ h√¨nh ---
if choice == 'Gi·ªõi thi·ªáu & Hu·∫•n luy·ªán M√¥ h√¨nh':
    st.header("1. M·ª•c ti√™u c·ªßa M√¥ h√¨nh")
    st.markdown("""
    M√¥ h√¨nh n√†y ƒë∆∞·ª£c x√¢y d·ª±ng ƒë·ªÉ h·ªó tr·ª£ c√°c chuy√™n vi√™n t√≠n d·ª•ng trong vi·ªác ƒë∆∞a ra quy·∫øt ƒë·ªãnh cho vay b·∫±ng c√°ch:
    - **D·ª± b√°o X√°c su·∫•t V·ª° n·ª£ (Probability of Default - PD)** c·ªßa kh√°ch h√†ng d·ª±a tr√™n c√°c ƒë·∫∑c ƒëi·ªÉm kinh t·∫ø - x√£ h·ªôi.
    - **S·ª≠ d·ª•ng m√¥ h√¨nh H·ªìi quy Logistic (Logistic Regression)**, m·ªôt thu·∫≠t to√°n ph·ªï bi·∫øn v√† di·ªÖn gi·∫£i ƒë∆∞·ª£c trong ng√†nh t√†i ch√≠nh.
    - **T√≠ch h·ª£p Tr√≠ tu·ªá nh√¢n t·∫°o (AI)** ƒë·ªÉ cung c·∫•p c√°c ph√¢n t√≠ch s√¢u h∆°n, gi√∫p hi·ªÉu r√µ "t·∫°i sao" ƒë·∫±ng sau m·ªói con s·ªë.

    B√™n d∆∞·ªõi, b·∫°n c√≥ th·ªÉ t·∫£i l√™n t·∫≠p d·ªØ li·ªáu l·ªãch s·ª≠ (`.csv`, `.xlsx`) ƒë·ªÉ hu·∫•n luy·ªán ho·∫∑c ki·ªÉm tra l·∫°i m√¥ h√¨nh.
    """)
    st.info("L∆∞u √Ω: D·ªØ li·ªáu hu·∫•n luy·ªán c·∫ßn c√≥ c·ªôt `y` l√†m bi·∫øn m·ª•c ti√™u, trong ƒë√≥ `1` l√† 'v·ª° n·ª£' v√† `0` l√† 'kh√¥ng v·ª° n·ª£'.", icon="‚ÑπÔ∏è")

    st.header("2. Hu·∫•n luy·ªán v√† ƒê√°nh gi√° M√¥ h√¨nh")

    # T·∫£i l√™n file d·ªØ li·ªáu hu·∫•n luy·ªán
    uploaded_file = st.file_uploader("T·∫£i l√™n t·ªáp d·ªØ li·ªáu hu·∫•n luy·ªán (CSV ho·∫∑c Excel)", type=['csv', 'xlsx'])
    df = None
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, encoding='latin-1')
            else:
                df = pd.read_excel(uploaded_file)
        except Exception as e:
            st.error(f"L·ªói ƒë·ªçc file: {e}")

    else:
        st.markdown("S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u `credit_access.csv` ƒë·ªÉ hu·∫•n luy·ªán.")
        try:
            df = pd.read_csv('credit_access.csv', encoding='latin-1')
        except FileNotFoundError:
            st.error("Kh√¥ng t√¨m th·∫•y t·ªáp `credit_access.csv`. Vui l√≤ng t·∫£i l√™n m·ªôt t·ªáp d·ªØ li·ªáu.")


    if df is not None:
        st.dataframe(df.head())
        if st.button("Hu·∫•n luy·ªán M√¥ h√¨nh"):
            with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                model, accuracy, cm, feature_names = train_model(df)
                st.session_state['trained_model'] = model
                st.session_state['model_accuracy'] = accuracy
                st.session_state['model_cm'] = cm
                st.session_state['feature_names'] = feature_names # L∆∞u l·∫°i th·ª© t·ª± c√°c c·ªôt
                time.sleep(1) # Gi·∫£ l·∫≠p th·ªùi gian hu·∫•n luy·ªán
            st.success(f"Hu·∫•n luy·ªán th√†nh c√¥ng! ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p ki·ªÉm tra: **{accuracy:.2%}**")

            st.subheader("Ma tr·∫≠n nh·∫ßm l·∫´n (Confusion Matrix)")
            fig, ax = plt.subplots()
            sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax,
                        xticklabels=['Kh√¥ng v·ª° n·ª£', 'V·ª° n·ª£'],
                        yticklabels=['Kh√¥ng v·ª° n·ª£', 'V·ª° n·ª£'])
            plt.xlabel('D·ª± ƒëo√°n')
            plt.ylabel('Th·ª±c t·∫ø')
            st.pyplot(fig)


# --- Trang 2: D·ª± b√°o V·ª° n·ª£ cho Kh√°ch h√†ng ---
elif choice == 'D·ª± b√°o V·ª° n·ª£ cho Kh√°ch h√†ng':
    st.header("Nh·∫≠p th√¥ng tin ƒë·ªÉ d·ª± b√°o")

    if 'trained_model' not in st.session_state:
        st.warning("M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán. Vui l√≤ng quay l·∫°i trang 'Gi·ªõi thi·ªáu & Hu·∫•n luy·ªán M√¥ h√¨nh' ƒë·ªÉ hu·∫•n luy·ªán tr∆∞·ªõc.", icon="‚ö†Ô∏è")
        st.stop()

    input_method = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p li·ªáu:", ("Nh·∫≠p th·ªß c√¥ng", "T·∫£i l√™n t·ªáp"))

    customer_data_df = None
    customer_data_dict = {}

    if input_method == "Nh·∫≠p th·ªß c√¥ng":
        st.subheader("Th√¥ng tin kh√°ch h√†ng")
        # S·ª≠ d·ª•ng 2 c·ªôt ƒë·ªÉ giao di·ªán g·ªçn g√†ng h∆°n
        col1, col2 = st.columns(2)
        with col1:
            dien_tich_dat = st.number_input('Di·ªán t√≠ch ƒë·∫•t s·ªü h·ªØu (m¬≤)', min_value=0, value=100)
            thu_nhap_nam = st.number_input('Thu nh·∫≠p m·ªôt nƒÉm c·ªßa h·ªô (tri·ªáu VNƒê)', min_value=0, value=150)
            tuoi_chu_ho = st.number_input('Tu·ªïi ch·ªß h·ªô', min_value=18, max_value=100, value=40)
            gioi_tinh = st.selectbox('Gi·ªõi t√≠nh', ['Nam', 'N·ªØ'])
            dia_vi_chu_ho = st.selectbox('ƒê·ªãa v·ªã ch·ªß h·ªô', ['Ch·ªß h·ªô', 'Th√†nh vi√™n kh√°c'])
        with col2:
            so_nguoi_phu_thuoc = st.number_input('S·ªë ng∆∞·ªùi ph·ª• thu·ªôc', min_value=0, value=2)
            lich_su_tin_dung = st.selectbox('L·ªãch s·ª≠ t√≠n d·ª•ng', ['T·ªët', 'Ch∆∞a c√≥ th√¥ng tin', 'C√≥ n·ª£ x·∫•u'])
            gia_tri_the_chap = st.number_input('Gi√° tr·ªã t√†i s·∫£n th·∫ø ch·∫•p (tri·ªáu VNƒê)', min_value=0, value=200)
            vay_phi_chinh_thuc = st.selectbox('Vay th·ªã tr∆∞·ªùng phi ch√≠nh th·ª©c?', ['C√≥', 'Kh√¥ng'])
            so_nam_den_truong = st.number_input('S·ªë nƒÉm ƒë·∫øn tr∆∞·ªùng c·ªßa ch·ªß h·ªô', min_value=0, value=12)

        if st.button("D·ª± b√°o"):
            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang d·∫°ng s·ªë ƒë·ªÉ ƒë∆∞a v√†o m√¥ h√¨nh
            customer_data_dict = {
                'DT': dien_tich_dat,
                'TN': thu_nhap_nam,
                'TCH': tuoi_chu_ho,
                'GT': 1 if gioi_tinh == 'Nam' else 0,
                'DV': 1 if dia_vi_chu_ho == 'Ch·ªß h·ªô' else 0,
                'SPT': so_nguoi_phu_thuoc,
                'LS': {'T·ªët': 1, 'Ch∆∞a c√≥ th√¥ng tin': 0, 'C√≥ n·ª£ x·∫•u': -1}[lich_su_tin_dung],
                'GTC': gia_tri_the_chap,
                'VPCT': 1 if vay_phi_chinh_thuc == 'C√≥' else 0,
                'GD': so_nam_den_truong,
            }
            # T·∫°o DataFrame v·ªõi th·ª© t·ª± c·ªôt ch√≠nh x√°c nh∆∞ khi hu·∫•n luy·ªán
            customer_data_df = pd.DataFrame([customer_data_dict])[st.session_state['feature_names']]


    elif input_method == "T·∫£i l√™n t·ªáp":
        uploaded_predict_file = st.file_uploader("T·∫£i l√™n t·ªáp kh√°ch h√†ng c·∫ßn d·ª± b√°o (CSV ho·∫∑c Excel)", type=['csv', 'xlsx'])
        if uploaded_predict_file:
            try:
                if uploaded_predict_file.name.endswith('.csv'):
                    customer_data_df = pd.read_csv(uploaded_predict_file)
                else:
                    customer_data_df = pd.read_excel(uploaded_predict_file)

                # ƒê·∫£m b·∫£o c√°c c·ªôt trong file t·∫£i l√™n kh·ªõp v·ªõi m√¥ h√¨nh
                if not all(col in customer_data_df.columns for col in st.session_state['feature_names']):
                     st.error(f"T·ªáp t·∫£i l√™n thi·∫øu c√°c c·ªôt c·∫ßn thi·∫øt. Y√™u c·∫ßu c√≥ ƒë·ªß c√°c c·ªôt: {st.session_state['feature_names']}")
                     customer_data_df = None
                else:
                    # S·∫Øp x·∫øp l·∫°i c√°c c·ªôt cho ƒë√∫ng th·ª© t·ª±
                    customer_data_df = customer_data_df[st.session_state['feature_names']]

            except Exception as e:
                st.error(f"L·ªói ƒë·ªçc file: {e}")
                customer_data_df = None


    # --- Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± b√°o v√† ph√¢n t√≠ch AI ---
    if customer_data_df is not None:
        st.subheader("K·∫øt qu·∫£ D·ª± b√°o")
        model = st.session_state['trained_model']
        probabilities = model.predict_proba(customer_data_df)
        pd_scores = probabilities[:, 1] # L·∫•y x√°c su·∫•t c·ªßa l·ªõp 1 (v·ª° n·ª£)

        results_df = customer_data_df.copy()
        results_df['X√°c su·∫•t V·ª° n·ª£ (PD)'] = [f"{score:.2%}" for score in pd_scores]

        st.dataframe(results_df)

        # Ch·ªâ th·ª±c hi·ªán ph√¢n t√≠ch AI cho tr∆∞·ªùng h·ª£p nh·∫≠p tay (1 kh√°ch h√†ng)
        if len(customer_data_df) == 1:
            pd_score = pd_scores[0]
            if pd_score > 0.5:
                st.error(f"**X√ÅC SU·∫§T V·ª† N·ª¢: {pd_score:.2%} (R·ªßi ro cao)**", icon="üö®")
            elif pd_score > 0.2:
                st.warning(f"**X√ÅC SU·∫§T V·ª† N·ª¢: {pd_score:.2%} (R·ªßi ro trung b√¨nh)**", icon="‚ö†Ô∏è")
            else:
                st.success(f"**X√ÅC SU·∫§T V·ª† N·ª¢: {pd_score:.2%} (R·ªßi ro th·∫•p)**", icon="‚úÖ")


            if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Chuy√™n s√¢u"):
                with st.spinner("AI ƒëang ph√¢n t√≠ch, vui l√≤ng ch·ªù..."):
                    ai_result = get_gemini_analysis(customer_data_dict, pd_score)
                    st.session_state['ai_analysis'] = ai_result

                if 'ai_analysis' in st.session_state:
                    st.subheader("üìù Ph√¢n t√≠ch v√† Khuy·∫øn ngh·ªã t·ª´ AI")
                    st.markdown(st.session_state['ai_analysis'])
